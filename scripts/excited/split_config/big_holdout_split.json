{
    "dset_path": "/home/saxelrod/rgb_nfs/dsets_switches/ref_big_dataset/0",
    "model_path": "/home/saxelrod/rgb_nfs/dsets_switches/big_holdout_split",
    "pruning": {
        "substruc_smiles": [
            [
                "N(=N/c1ccccc1)\\c2ccccc2"
            ]
        ],
        "stereo_in_substruc": false
    },
    "balanced_sampling": {
        "balance_type": "spec_config_zhu_balance",
        "ref_config": {
            "type": "equil",
            "kwargs": {
                "substruc_smiles": "N(=N/c1ccccc1)\\c2ccccc2",
                "substruc_idx": [
                    3,
                    4,
                    5,
                    6
                ],
                "group_name": "switches",
                "method_names": [
                    "dft_d3_gga_bp86",
                    "dft_hyb_bhhlyp",
                    "sf_tddft_bhhlyp"
                ],
                "method_descrips": [
                    "Orca bp86/def2-SVP D3 DFT RI",
                    "Orca BHHLYP/6-31G* DFT",
                    "GAMESS bhhlyp/6-31G* spin flip tddft"
                ],
                "pref_method_idx": 0,
                "device": "cpu",
                "ref_smiles_list": [
                    "N(=N/c1ccccc1)\\c2ccccc2",
                    "N(=N/c1ccccc1)/c2ccccc2"
                ]
            }
        },
        "sampler_kwargs": {
            "zhu_kwargs": {
                "upper_key": "energy_1",
                "lower_key": "energy_0",
                "expec_gap": 0.00551
            },
            "spec_weight": 0.6,
            "config_weight": 0.5,
            "zhu_weight": 0.5,
            "device": "cpu",
            "extra_category": true,
            "extra_rmsd": 0.25
        }
    },
    "diabatization": {
        "max_diabat_rmsd": 0.15,
        "num_diabat_states": 2,
        "diabat_assignments": {
            "0": [
                "energy_0",
                "energy_1"
            ],
            "1": [
                "energy_1",
                "energy_0"
            ]
        },
        "diabatic_keys": [
            [
                "d0",
                "lam"
            ],
            [
                "lam",
                "d1"
            ]
        ]
    },
    "splitting": {
        "num_parallel": 16,
        "seed": 0,
        "split_sizes": {
            "val": 10000
        },
        "species_splits": {
            "test": [
			"CCCCCCCCN(CCCCCCCC)c1ccc(/N=N\\c2ccc(C(=O)C(F)(F)F)cc2)cc1",
			"CCCCCCCCN(CCCCCCCC)c1ccc(/N=N/c2ccc(C(=O)C(F)(F)F)cc2)cc1",
			"OCc1ccc(/N=N\\c2ccc(OCc3cc(OCc4ccccc4)cc(OCc4ccccc4)c3)cc2)cc1",
			"OCc1ccc(/N=N/c2ccc(OCc3cc(OCc4ccccc4)cc(OCc4ccccc4)c3)cc2)cc1",
			"CC(C)(C)c1cc(C(C)(C)C)c(/N=N/c2c(C(C)(C)C)cc(C(C)(C)C)cc2C(C)(C)C)c(C(C)(C)C)c1",
			"CC(C)(C)c1cc(C(C)(C)C)c(/N=N\\c2c(C(C)(C)C)cc(C(C)(C)C)cc2C(C)(C)C)c(C(C)(C)C)c1",
			"CC(=O)Oc1cc(N(C)Cc2ccccn2)c(/N=N/c2ccccc2N(C)Cc2ccccn2)cc1C",
			"CC(=O)Oc1cc(N(C)Cc2ccccn2)c(/N=N\\c2ccccc2N(C)Cc2ccccn2)cc1C",
			"Cc1cc(/N=N/c2ccccc2N(C)Cc2ccccn2)c(N(C)Cc2ccccn2)cc1O",
			"Cc1cc(/N=N\\c2ccccc2N(C)Cc2ccccn2)c(N(C)Cc2ccccn2)cc1O",
			"CC1(C)c2ccccc2-c2ccc(N(c3ccc(/N=N\\c4ccccc4)cc3)c3ccc4c(c3)C(C)(C)c3ccccc3-4)cc21",
			"CC1(C)c2ccccc2-c2ccc(N(c3ccc(/N=N/c4ccccc4)cc3)c3ccc4c(c3)C(C)(C)c3ccccc3-4)cc21",
			"COc1cc(N(C)Cc2ccccn2)c(/N=N/c2ccccc2N(C)Cc2ccccn2)cc1C",
			"COc1cc(N(C)Cc2ccccn2)c(/N=N\\c2ccccc2N(C)Cc2ccccn2)cc1C",
			"CC(C)c1cc(C(C)C)c(/N=N/c2c(C(C)C)cc(C(C)C)cc2C(C)C)c(C(C)C)c1",
			"CC(C)c1cc(C(C)C)c(/N=N\\c2c(C(C)C)cc(C(C)C)cc2C(C)C)c(C(C)C)c1",
			"CN(Cc1ccccn1)c1ccccc1/N=N\\c1ccccc1N(C)Cc1ccccn1",
			"CN(Cc1ccccn1)c1ccccc1/N=N/c1ccccc1N(C)Cc1ccccn1",
			"Fc1cccc(F)c1/N=N/c1ccccc1",
			"Fc1cccc(F)c1/N=N\\c1ccccc1",
			"CCc1cc(CC)c(/N=N/c2c(CC)cc(CC)cc2CC)c(CC)c1",
			"CCc1cc(CC)c(/N=N\\c2c(CC)cc(CC)cc2CC)c(CC)c1",
			"c1ccc(CNc2ccccc2/N=N\\c2ccccc2NCc2ccccn2)nc1",
			"c1ccc(CNc2ccccc2/N=N/c2ccccc2NCc2ccccn2)nc1",
			"COc1cc(C)c(/N=N/c2ccc([N+](=O)[O-])cc2)c(C)c1",
			"COc1cc(C)c(/N=N\\c2ccc([N+](=O)[O-])cc2)c(C)c1",
			"CCOC(=O)c1cc(F)c(/N=N\\c2c(F)cc(C(=O)OCC)cc2F)c(F)c1",
			"CCOC(=O)c1cc(F)c(/N=N/c2c(F)cc(C(=O)OCC)cc2F)c(F)c1",
			"Cc1cc(C)c(/N=N\\c2c(C)cc(C)cc2C)c(C)c1",
			"Cc1cc(C)c(/N=N/c2c(C)cc(C)cc2C)c(C)c1",
			"OCc1ccc(/N=N\\c2ccc(OCc3ccccc3)cc2)cc1",
			"OCc1ccc(/N=N/c2ccc(OCc3ccccc3)cc2)cc1",
			"CCN(CC)c1ccc(/N=N/c2ccc(OC)cc2)cc1",
			"CCN(CC)c1ccc(/N=N\\c2ccc(OC)cc2)cc1",
			"Nc1ccccc1/N=N\\c1ccccc1NCc1ccccn1",
			"Nc1ccccc1/N=N/c1ccccc1NCc1ccccn1",
			"Fc1cccc(F)c1/N=N/c1c(F)cc(-c2ccccc2)cc1F",
			"Fc1cccc(F)c1/N=N\\c1c(F)cc(-c2ccccc2)cc1F",
			"Cc1cc(C)c(/N=N\\c2ccccc2)c(C)c1",
			"Cc1cc(C)c(/N=N/c2ccccc2)c(C)c1",
			"c1ccc(/N=N/c2cccc3ccccc23)cc1",
			"c1ccc(/N=N\\c2cccc3ccccc23)cc1"
			]
        }
    },
    "needs_nbrs": false,
    "needs_angles": false
}
